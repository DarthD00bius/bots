#!/usr/bin/python3
import praw
import pdb
import re
import os
import datetime
from praw.models import MoreComments
from praw.models import Submission

###################################################
#  Class Definitions                              
#     TODO: put in separate file and import       
###################################################
class word:
    def __init__(self, mispelling, correction, alternate):
        self.misspelling = mispelling
        self.correction = correction
        self.alternate = alternate


###################################################
#initialize config settings
###################################################
subredditname = "ddbottest" #TODO: use a list read from whitelist
scriptname = "commonmisspellings"
logpath = "/var/log/"
logfile = scriptname + datetime.date.today().strftime("%Y%m%d%H%M%S") +  ".log"
datapath = "~/etc/bots/" + scriptname + "/"
repliedtofile = "posts_replied_to.txt"
whitelist = "whitelist.txt"     #subs we intend to post to
blacklist = "blacklist.txt"     #subs we won't post to no matter what; users we won't reply to know matter what /r/ = sub /u/ = user
#cutoff is a datetime some specified interval in the past. We won't reply to comments older than that,
# and thus don't have to keep "replied tos" older than that (but we'll keep a safe margin anyway
#cutoff = ???


###################################################
#  Populate list of trigger words                 
#     TODO: read in a file of trigger words       
###################################################
wordList = []

wordList.append(word("rediculous","ridiculous",""))
wordList.append(word("persue","pursue","peruse"))
wordList.append(word("persued","pursued","perused"))
wordList.append(word("persuing","pursuing","perusing"))
wordList.append(word("masterbate","masturbate",""))

###################################################
#Create reddit instance
###################################################
reddit = praw.Reddit(scriptname)

###################################################
#testing authentication
#print(reddit.user.me())
###################################################

###################################################
#import list of posts we've already replied to
###################################################
if not os.path.isfile("posts_replied_to.txt"):
    posts_replied_to = []
else:
    with open("posts_replied_to.txt", "r") as f:
       posts_replied_to = f.read()
       posts_replied_to = posts_replied_to.split("\n")
       posts_replied_to = list(filter(None, posts_replied_to))

###################################################
# Get the top x values from our subreddit
###################################################
x = 5
subreddit = reddit.subreddit(subredditname)
for submission in subreddit.hot(limit=x):
    #print(submission.title)

    # If we haven't replied to this post before
    if submission.id not in posts_replied_to:
        # Do a case insensitive search for each possible misspelling
        print("Checking submission {} with title \"{}\"".format(submission.id, submission.title))
        for w in wordList:
            print("Looking for {}".format(w.misspelling))
            if re.search(w.misspelling, submission.title, re.IGNORECASE): #or re.search(w.misspelling, submission.text, re.IGNORECASE): 
                # Reply to the post
                replyBody = "The correct spelling is **{}**.".format(w.correction)
                if w.alternate != "":
                    replyBody = replyBody + "\n\n---------------------------------\n\nDid you mean [{0}](https://www.merriam-webster.com/dictionary/{0})?".format(w.alternate)
                submission.reply(replyBody)
                print("Bot replying to {} ".format(submission.title))
        	    # Store the current id into our list
                posts_replied_to.append(submission.id)

# Write our updated list back to the file
with open("posts_replied_to.txt", "w") as f:
    for post_id in posts_replied_to:
        f.write(post_id + "\n")


